#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<queue>
using namespace std;
#define MAX_SIZE 6677
#define MOD 747474747
#define ull unsigned long long int
#define INFINITY 1<<31
int n,d,counter1,counter2;
struct vertex
{
	int id,c[5],marked,key;
};
vector<vertex> a;
ull distance1(vertex v1,vertex v2)
{
	ull i,v=0,temp;
	for(i=0;i<d;i++)
	{
		temp=(v1.c[i]-v2.c[i])*(v1.c[i]-v2.c[i]);
		if(temp>=MOD)
			temp%=MOD;
		v+=temp;
		if(v>=MOD)
			v%=MOD;
	}
	return v;
}
struct edge
{
	int id1,id2;
};
vector<edge> b;
class mycomparison
{
  bool reverse;
public:
  mycomparison(const bool& revparam=false)
    {reverse=revparam;}
  bool operator() (const edge &lhs, const edge &rhs) const
  {
    return (distance1(a[lhs.id1],a[lhs.id2])<distance1(a[rhs.id1],a[rhs.id2]));
  }
};
bool myfunction (edge i,edge j) { return (distance1(a[i.id1],a[i.id2])<distance1(a[j.id1],a[j.id2])); }
int equal(vertex k1,vertex k2)
{
	int l=0;
	for(int i=0;i<d;i++)
	{
		if(k1.c[i]==k2.c[i])
			l++;	
	}
	return (l==d);
}

int main()
{
	counter1=0;
	int t,e;
	ull score,s1;
	vertex temp;
	edge t1;
	scanf("%d",&t);
	while(t--)
	{
		a.clear();
		b.clear();
		score=1;
		scanf("%d%d",&n,&d);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<d;j++)
			{
				scanf("%d",&temp.c[j]);
			}
			temp.id=i;
			temp.marked=0;
			temp.key=INFINITY;
//			a[counter1]=temp;
			a.push_back(temp);
		}
		
		//Gonna Run Kruskal's
		counter2=0;
		for(int i=0;i<n;i++)
		{
			for(int j=i+1;j<n;j++)
			{
				t1.id1=i;
				t1.id2=j;
				b.push_back(t1);									
				counter2++;
			}
		}
		priority_queue< edge,vector<edge>,mycomparison > pq;
		for(int i=0;i<counter2 && i<666600;i++)
			pq.push(b[i]);
		e=0;
		while(e<n && !pq.empty())
		{
			t1=pq.top();
			pq.pop();
			if(a[t1.id1].marked && a[t1.id2].marked)
				continue;
			s1=distance1(a[t1.id1],a[t1.id2]);			
			score*=s1;
			e++;
			a[t1.id1].marked=a[t1.id2].marked=1;
			if(score>=MOD)
				score%=MOD;
		}
		printf("%lld\n",score);				
	}
	return 0;
}
